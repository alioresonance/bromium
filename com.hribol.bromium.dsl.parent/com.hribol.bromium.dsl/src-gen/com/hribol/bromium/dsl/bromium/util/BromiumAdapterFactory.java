/**
 * generated by Xtext 2.13.0
 */
package com.hribol.bromium.dsl.bromium.util;

import com.hribol.bromium.dsl.bromium.*;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.common.notify.impl.AdapterFactoryImpl;

import org.eclipse.emf.ecore.EObject;

/**
 * <!-- begin-user-doc -->
 * The <b>Adapter Factory</b> for the model.
 * It provides an adapter <code>createXXX</code> method for each class of the model.
 * <!-- end-user-doc -->
 * @see com.hribol.bromium.dsl.bromium.BromiumPackage
 * @generated
 */
public class BromiumAdapterFactory extends AdapterFactoryImpl
{
  /**
   * The cached model package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static BromiumPackage modelPackage;

  /**
   * Creates an instance of the adapter factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public BromiumAdapterFactory()
  {
    if (modelPackage == null)
    {
      modelPackage = BromiumPackage.eINSTANCE;
    }
  }

  /**
   * Returns whether this factory is applicable for the type of the object.
   * <!-- begin-user-doc -->
   * This implementation returns <code>true</code> if the object is either the model's package or is an instance object of the model.
   * <!-- end-user-doc -->
   * @return whether this factory is applicable for the type of the object.
   * @generated
   */
  @Override
  public boolean isFactoryForType(Object object)
  {
    if (object == modelPackage)
    {
      return true;
    }
    if (object instanceof EObject)
    {
      return ((EObject)object).eClass().getEPackage() == modelPackage;
    }
    return false;
  }

  /**
   * The switch that delegates to the <code>createXXX</code> methods.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BromiumSwitch<Adapter> modelSwitch =
    new BromiumSwitch<Adapter>()
    {
      @Override
      public Adapter caseModel(Model object)
      {
        return createModelAdapter();
      }
      @Override
      public Adapter caseApplicationAction(ApplicationAction object)
      {
        return createApplicationActionAdapter();
      }
      @Override
      public Adapter caseSyntaxDefinition(SyntaxDefinition object)
      {
        return createSyntaxDefinitionAdapter();
      }
      @Override
      public Adapter caseWebDriverActionCondition(WebDriverActionCondition object)
      {
        return createWebDriverActionConditionAdapter();
      }
      @Override
      public Adapter caseWebDriverAction(WebDriverAction object)
      {
        return createWebDriverActionAdapter();
      }
      @Override
      public Adapter casePrecondition(Precondition object)
      {
        return createPreconditionAdapter();
      }
      @Override
      public Adapter casePostcondition(Postcondition object)
      {
        return createPostconditionAdapter();
      }
      @Override
      public Adapter caseExpectHttpRequest(ExpectHttpRequest object)
      {
        return createExpectHttpRequestAdapter();
      }
      @Override
      public Adapter caseElementByCssToBePresent(ElementByCssToBePresent object)
      {
        return createElementByCssToBePresentAdapter();
      }
      @Override
      public Adapter caseClickCssSelector(ClickCssSelector object)
      {
        return createClickCssSelectorAdapter();
      }
      @Override
      public Adapter casePageLoad(PageLoad object)
      {
        return createPageLoadAdapter();
      }
      @Override
      public Adapter caseTypeTextInElementFoundByCssSelector(TypeTextInElementFoundByCssSelector object)
      {
        return createTypeTextInElementFoundByCssSelectorAdapter();
      }
      @Override
      public Adapter caseTextOfElementWithCssSelectorToBe(TextOfElementWithCssSelectorToBe object)
      {
        return createTextOfElementWithCssSelectorToBeAdapter();
      }
      @Override
      public Adapter caseClickClassByText(ClickClassByText object)
      {
        return createClickClassByTextAdapter();
      }
      @Override
      public Adapter caseSetVariableToTextOfElementWithCssSelector(SetVariableToTextOfElementWithCssSelector object)
      {
        return createSetVariableToTextOfElementWithCssSelectorAdapter();
      }
      @Override
      public Adapter caseClickDataId(ClickDataId object)
      {
        return createClickDataIdAdapter();
      }
      @Override
      public Adapter caseConfirmAlert(ConfirmAlert object)
      {
        return createConfirmAlertAdapter();
      }
      @Override
      public Adapter caseClickId(ClickId object)
      {
        return createClickIdAdapter();
      }
      @Override
      public Adapter caseClickName(ClickName object)
      {
        return createClickNameAdapter();
      }
      @Override
      public Adapter caseParameterValue(ParameterValue object)
      {
        return createParameterValueAdapter();
      }
      @Override
      public Adapter caseExposedParameter(ExposedParameter object)
      {
        return createExposedParameterAdapter();
      }
      @Override
      public Adapter caseThreeDottedVersion(ThreeDottedVersion object)
      {
        return createThreeDottedVersionAdapter();
      }
      @Override
      public Adapter defaultCase(EObject object)
      {
        return createEObjectAdapter();
      }
    };

  /**
   * Creates an adapter for the <code>target</code>.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param target the object to adapt.
   * @return the adapter for the <code>target</code>.
   * @generated
   */
  @Override
  public Adapter createAdapter(Notifier target)
  {
    return modelSwitch.doSwitch((EObject)target);
  }


  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.Model <em>Model</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.Model
   * @generated
   */
  public Adapter createModelAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ApplicationAction <em>Application Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ApplicationAction
   * @generated
   */
  public Adapter createApplicationActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.SyntaxDefinition <em>Syntax Definition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.SyntaxDefinition
   * @generated
   */
  public Adapter createSyntaxDefinitionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.WebDriverActionCondition <em>Web Driver Action Condition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.WebDriverActionCondition
   * @generated
   */
  public Adapter createWebDriverActionConditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.WebDriverAction <em>Web Driver Action</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.WebDriverAction
   * @generated
   */
  public Adapter createWebDriverActionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.Precondition <em>Precondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.Precondition
   * @generated
   */
  public Adapter createPreconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.Postcondition <em>Postcondition</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.Postcondition
   * @generated
   */
  public Adapter createPostconditionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ExpectHttpRequest <em>Expect Http Request</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ExpectHttpRequest
   * @generated
   */
  public Adapter createExpectHttpRequestAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ElementByCssToBePresent <em>Element By Css To Be Present</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ElementByCssToBePresent
   * @generated
   */
  public Adapter createElementByCssToBePresentAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ClickCssSelector <em>Click Css Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ClickCssSelector
   * @generated
   */
  public Adapter createClickCssSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.PageLoad <em>Page Load</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.PageLoad
   * @generated
   */
  public Adapter createPageLoadAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.TypeTextInElementFoundByCssSelector <em>Type Text In Element Found By Css Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.TypeTextInElementFoundByCssSelector
   * @generated
   */
  public Adapter createTypeTextInElementFoundByCssSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.TextOfElementWithCssSelectorToBe <em>Text Of Element With Css Selector To Be</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.TextOfElementWithCssSelectorToBe
   * @generated
   */
  public Adapter createTextOfElementWithCssSelectorToBeAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ClickClassByText <em>Click Class By Text</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ClickClassByText
   * @generated
   */
  public Adapter createClickClassByTextAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.SetVariableToTextOfElementWithCssSelector <em>Set Variable To Text Of Element With Css Selector</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.SetVariableToTextOfElementWithCssSelector
   * @generated
   */
  public Adapter createSetVariableToTextOfElementWithCssSelectorAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ClickDataId <em>Click Data Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ClickDataId
   * @generated
   */
  public Adapter createClickDataIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ConfirmAlert <em>Confirm Alert</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ConfirmAlert
   * @generated
   */
  public Adapter createConfirmAlertAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ClickId <em>Click Id</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ClickId
   * @generated
   */
  public Adapter createClickIdAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ClickName <em>Click Name</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ClickName
   * @generated
   */
  public Adapter createClickNameAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ParameterValue <em>Parameter Value</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ParameterValue
   * @generated
   */
  public Adapter createParameterValueAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ExposedParameter <em>Exposed Parameter</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ExposedParameter
   * @generated
   */
  public Adapter createExposedParameterAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for an object of class '{@link com.hribol.bromium.dsl.bromium.ThreeDottedVersion <em>Three Dotted Version</em>}'.
   * <!-- begin-user-doc -->
   * This default implementation returns null so that we can easily ignore cases;
   * it's useful to ignore a case when inheritance will catch all the cases anyway.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @see com.hribol.bromium.dsl.bromium.ThreeDottedVersion
   * @generated
   */
  public Adapter createThreeDottedVersionAdapter()
  {
    return null;
  }

  /**
   * Creates a new adapter for the default case.
   * <!-- begin-user-doc -->
   * This default implementation returns null.
   * <!-- end-user-doc -->
   * @return the new adapter.
   * @generated
   */
  public Adapter createEObjectAdapter()
  {
    return null;
  }

} //BromiumAdapterFactory
