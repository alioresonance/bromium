/**
 * generated by Xtext 2.13.0
 */
package com.hribol.bromium.dsl.ui.contentassist;

import com.hribol.bromium.dsl.ui.contentassist.AbstractBromiumProposalProvider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.ui.editor.contentassist.ContentAssistContext;
import org.eclipse.xtext.ui.editor.contentassist.ICompletionProposalAcceptor;

/**
 * See https://www.eclipse.org/Xtext/documentation/304_ide_concepts.html#content-assist
 * on how to customize the content assistant.
 */
@SuppressWarnings("all")
public class BromiumProposalProvider extends AbstractBromiumProposalProvider {
  @Override
  public void complete_Postcondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("then make sure", context));
    super.complete_Precondition(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void complete_WebDriverAction(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("click on element with css selector \'selector\'", context));
    acceptor.accept(this.createCompletionProposal("click on element with class \'class\' and text \'text\'", context));
    acceptor.accept(this.createCompletionProposal("load page \'subpath\'", context));
    acceptor.accept(this.createCompletionProposal("type text \'text\' in element with css selector \'selector\'", context));
    acceptor.accept(this.createCompletionProposal("click on element with dataId \'id\'", context));
    acceptor.accept(this.createCompletionProposal("set variable \'variable\' to the text of element with css selector \'selector\'", context));
    acceptor.accept(this.createCompletionProposal("click on element with id \'id\'", context));
    acceptor.accept(this.createCompletionProposal("click on element with name \'name\'", context));
    super.complete_WebDriverAction(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void complete_WebDriverActionCondition(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("element with css selector \'selector\' is present", context));
    acceptor.accept(this.createCompletionProposal("element with css selector \'cssSelector\' has text \'text\'", context));
    acceptor.accept(this.createCompletionProposal("to confirm \'alert\'", context));
    super.complete_WebDriverActionCondition(model, ruleCall, context, acceptor);
  }
  
  @Override
  public void complete_ExpectHttpRequest(final EObject model, final RuleCall ruleCall, final ContentAssistContext context, final ICompletionProposalAcceptor acceptor) {
    acceptor.accept(this.createCompletionProposal("do not expect http request", context));
    acceptor.accept(this.createCompletionProposal("do expect http request", context));
    super.complete_ExpectHttpRequest(model, ruleCall, context, acceptor);
  }
}
